/**
 * @name ranges-apply
 * @fileoverview Take an array of string index ranges, delete/replace the string according to them
 * @version 6.0.10
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-apply/}
 */

import{rMerge as b}from"ranges-merge";import $ from"tiny-invariant";var f="6.0.10";var N=f;function v(s,n,r){let t=0,l=0;if(arguments.length===0)throw new Error("ranges-apply: [THROW_ID_01] inputs missing!");if(typeof s!="string")throw new TypeError(`ranges-apply: [THROW_ID_02] first input argument must be a string! Currently it's: ${typeof s}, equal to: ${JSON.stringify(s,null,4)}`);if(n&&!Array.isArray(n))throw new TypeError(`ranges-apply: [THROW_ID_03] second input argument must be an array (or null)! Currently it's: ${typeof n}, equal to: ${JSON.stringify(n,null,4)}`);if(r&&typeof r!="function")throw new TypeError(`ranges-apply: [THROW_ID_04] the third input argument must be a function (or falsey)! Currently it's: ${typeof r}, equal to: ${JSON.stringify(r,null,4)}`);if(!n||!n.filter(e=>e).length)return s;let a;Array.isArray(n)&&Number.isInteger(n[0])&&Number.isInteger(n[1])?a=[Array.from(n)]:a=Array.from(n);let g=a.length,c=0;a.filter(e=>e).forEach((e,i)=>{if(r&&(t=Math.floor(c/g*10),t!==l&&(l=t,r(t))),!Array.isArray(e))throw new TypeError(`ranges-apply: [THROW_ID_05] ranges array, second input arg., has ${i}th element not an array: ${JSON.stringify(e,null,4)}, which is ${typeof e}`);if(!Number.isInteger(e[0])){if(!Number.isInteger(+e[0])||+e[0]<0)throw new TypeError(`ranges-apply: [THROW_ID_06] ranges array, second input arg. has ${i}th element, array ${JSON.stringify(e,null,0)}. Its first element is not an integer, string index, but ${typeof e[0]}, equal to: ${JSON.stringify(e[0],null,4)}.`);a[i][0]=+a[i][0]}if(!Number.isInteger(e[1])){if(!Number.isInteger(+e[1])||+e[1]<0)throw new TypeError(`ranges-apply: [THROW_ID_07] ranges array, second input arg. has ${i}th element, array ${JSON.stringify(e,null,0)}. Its second element is not an integer, string index, but ${typeof e[1]}, equal to: ${JSON.stringify(e[1],null,4)}.`);a[i][1]=+a[i][1]}c+=1});let p=b(a,{progressFn:e=>{r&&(t=10+Math.floor(e/10),t!==l&&(l=t,r(t)))}});$(p);let y=p.length;if(y>0){let e=s.slice(p[y-1][1]);s=p.reduce((i,w,o,u)=>{r&&(t=20+Math.floor(o/y*80),t!==l&&(l=t,r(t)));let m=o===0?0:u[o-1][1],d=u[o][0];return`${i}${s.slice(m,d)}${u[o][2]||""}`},""),s+=e}return s}export{v as rApply,N as version};
